{"ast":null,"code":"var _jsxFileName = \"/Users/sheriseee/Documents/Noom/frontend/src/components/hostInGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { BACKEND_URL } from \"../constants.js\";\nimport { io } from \"socket.io-client\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\nimport \"../tailwind.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst laneOffsets = {\n  0: 59,\n  1: 45,\n  2: 33\n};\n\n/**\n * Car creates a car dot that goes around the track at a certain position and on a certain lane.\n *\n * Input\n * @param {integer} lane the lane on which the car is \"driving\" and it starts from 0 and ends at 2.\n * @param {integer} position the position of the car on the track, this can be a value between 0 and 360.\n * @param {string} colour allows to set a colour to the car to be able to differentiate between different players.\n * @param {integer} locOffset allows to set the offset of the location of the car on the track.\n * @param {integer} questionsCount the number of questions that are going to be asked in the game.\n *\n * Output\n * Car\n */\nfunction Car({\n  lane = 2,\n  position = 0,\n  colour = \"bg-blue-900\",\n  locOffset = 0,\n  questionsCount = 10\n}) {\n  const offset = laneOffsets[lane] - 2 + locOffset * 2 % 5;\n  const radians = position * 2 * Math.PI / questionsCount; // Changed to 2 * Math.PI to ensure full circle\n  const carX = 50 + offset * Math.cos(radians);\n  const carY = 50 + offset * Math.sin(radians);\n  const angle = position * 360 / questionsCount + 90;\n  const carStyle = {\n    position: \"absolute\",\n    width: \"40px\",\n    height: \"20px\",\n    borderRadius: \"10%\",\n    transform: `translate(-50%, -50%) rotate(${angle}deg)`,\n    left: `${carX}%`,\n    top: `${carY}%`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: colour,\n    style: carStyle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n}\n_c = Car;\n{\n  /* Car prop validation */\n}\nCar.propTypes = {\n  lane: PropTypes.number,\n  position: PropTypes.number,\n  colour: PropTypes.string,\n  locOffset: PropTypes.number,\n  questionsCount: PropTypes.number\n};\nCar.defaultProps = {\n  lane: 2,\n  position: 0,\n  colour: \"bg-blue-900\",\n  locOffset: 0,\n  questionCount: 10\n};\n\n/**\n * Creates a player with their name and car colour into the leader board.\n *\n * Input\n * @param {string} name, the name of the player, this is a required field.\n * @param {string} colour, the colour of the car that the player has, this field is also required. This should be a tailwind colour ie bg-green-500\n *\n * Output\n * A div element with the colour on the left in a circle and the player name on the right.\n */\nfunction Players({\n  name,\n  colour\n}) {\n  const innerDiv = \"w-5 h-5 \" + colour + \" rounded-full mr-2\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: innerDiv\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Players;\n{\n  /* Player prop validation */\n}\nPlayers.propTypes = {\n  name: PropTypes.string.isRequired,\n  colour: PropTypes.string.isRequired\n};\nfunction HostInGame() {\n  _s();\n  const location = useLocation();\n  const [socket, setSocket] = useState(null);\n  const [playerDetails, setPlayerDetails] = useState([]);\n  const [code, setCode] = useState(null);\n  const [playerLanes, setPlayerLanes] = useState({});\n  const [questionCount, setQuestionCount] = useState(10);\n  const [timer, setTimer] = useState(34);\n  const [currentQuestion, setCurrentQuestion] = useState(1);\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const user = queryParams.get(\"username\");\n    setCode(queryParams.get(\"roomID\"));\n\n    // Only create the socket connection if it hasn't been created already\n    if (!socket) {\n      const sock = io(BACKEND_URL, {\n        query: {\n          name: user,\n          roomID: queryParams.get(\"roomID\"),\n          isHost: queryParams.get(\"host\")\n        }\n      });\n      setSocket(sock);\n    }\n\n    // Cleanup the socket connection when the component unmounts\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [location, socket]);\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"message\", message => {\n        console.log(JSON.stringify(message));\n        switch (message.messageType) {\n          case \"leaderboard\":\n            setQuestionCount(message.data.maxQuestions);\n            setPlayerLanes(prevPlayerLanes => {\n              const updatedLanes = {\n                ...prevPlayerLanes\n              };\n              const newPlayerDetails = message.data.leaderboard.map((player, index) => {\n                if (updatedLanes[player.username] === undefined) {\n                  // Set lane to 1 if no lane is currently set. This would only happen at the start of the game.\n                  updatedLanes[player.username] = 1;\n                }\n                return {\n                  id: index,\n                  playerName: player.username,\n                  colour: player.colour,\n                  lane: updatedLanes[player.username],\n                  position: message.data.groupCentre + player.positionDelta\n                };\n              });\n              setPlayerDetails(newPlayerDetails);\n              return updatedLanes;\n            });\n            break;\n          case \"changeLane\":\n            console.log(\"Changing\", message.data.username, \"'s lane to \", message.data.lane);\n            setPlayerLanes(prevPlayerLanes => ({\n              ...prevPlayerLanes,\n              [message.data.username]: message.data.lane\n            }));\n            setPlayerDetails(prevPlayerDetails => prevPlayerDetails.map(player => player.playerName === message.data.username ? {\n              ...player,\n              lane: message.data.lane\n            } : player));\n            break;\n          case \"endGame\":\n            console.log(\"Game ended\");\n            window.location.href = `/endgame?roomID=${code}&host=true`;\n            break;\n          default:\n            console.log(message.data);\n            break;\n        }\n      });\n      return () => {\n        socket.off(\"message\");\n      };\n    }\n  }, [socket]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer === 0) {\n          setCurrentQuestion(prevQuestion => prevQuestion + 0.5);\n          return 29;\n        } else {\n          return prevTimer - 1;\n        }\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleEndGame = () => {\n    socket.emit(\"message\", {\n      messageType: \"endGame\"\n    });\n  };\n  const handleQuestionEnd = () => {\n    socket.emit(\"message\", {\n      messageType: \"endQuestion\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hostGame\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-green-700 flex min-h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 flex items-center justify-center relative\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-[90%] h-[90%] rounded-full border-8 border-gray-800 flex items-center justify-center relative bg-gray-500\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-[80%] h-[80%] rounded-full border-8 border-gray-800 flex items-center justify-center relative bg-gray-500\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-[75%] h-[75%] rounded-full border-8 border-gray-800 absolute\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-[50%] h-[50%] rounded-full border-8 border-gray-800 absolute bg-green-700\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), playerDetails.map(player => /*#__PURE__*/_jsxDEV(Car, {\n              lane: player.lane,\n              position: player.position,\n              colour: player.colour,\n              locOffset: player.id,\n              questionsCount: questionCount\n            }, player.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed top-10 left-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100\",\n          height: \"100\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"50\",\n            cy: \"50\",\n            r: \"45\",\n            stroke: \"black\",\n            strokeWidth: \"10\",\n            fill: \"none\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"50\",\n            cy: \"50\",\n            r: \"45\",\n            stroke: \"blue\",\n            strokeWidth: \"5\",\n            fill: \"none\",\n            strokeDasharray: Math.PI * 2 * 45,\n            strokeDashoffset: Math.PI * 2 * 45 * (29 - timer) / 29,\n            transform: \"rotate(-90 50 50)\",\n            style: {\n              transition: \"stroke-dashoffset 0.5s linear\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: \"50%\",\n            y: \"50%\",\n            textAnchor: \"middle\",\n            dy: \".3em\",\n            fontSize: \"40\",\n            children: timer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center font-bold\",\n          children: [\"Round \", currentQuestion, \" / \", questionCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/7 bg-gray-900 text-white p-4 flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold\",\n          children: \"Leader-board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), playerDetails.map(player => /*#__PURE__*/_jsxDEV(Players, {\n          name: player.playerName,\n          colour: player.colour\n        }, player.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded\",\n          onClick: handleEndGame,\n          children: \"End Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded\",\n          onClick: handleQuestionEnd,\n          children: \"End Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n_s(HostInGame, \"tNolS9qoghQ6ZItwK4/H3ggPgBU=\", false, function () {\n  return [useLocation];\n});\n_c3 = HostInGame;\nexport default HostInGame;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Car\");\n$RefreshReg$(_c2, \"Players\");\n$RefreshReg$(_c3, \"HostInGame\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","BACKEND_URL","io","PropTypes","jsxDEV","_jsxDEV","laneOffsets","Car","lane","position","colour","locOffset","questionsCount","offset","radians","Math","PI","carX","cos","carY","sin","angle","carStyle","width","height","borderRadius","transform","left","top","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","number","string","defaultProps","questionCount","Players","name","innerDiv","children","_c2","isRequired","HostInGame","_s","location","socket","setSocket","playerDetails","setPlayerDetails","code","setCode","playerLanes","setPlayerLanes","setQuestionCount","timer","setTimer","currentQuestion","setCurrentQuestion","queryParams","URLSearchParams","search","user","get","sock","query","roomID","isHost","disconnect","on","message","console","log","JSON","stringify","messageType","data","maxQuestions","prevPlayerLanes","updatedLanes","newPlayerDetails","leaderboard","map","player","index","username","undefined","id","playerName","groupCentre","positionDelta","prevPlayerDetails","window","href","off","interval","setInterval","prevTimer","prevQuestion","clearInterval","handleEndGame","emit","handleQuestionEnd","cx","cy","r","stroke","strokeWidth","fill","strokeDasharray","strokeDashoffset","transition","x","y","textAnchor","dy","fontSize","onClick","_c3","$RefreshReg$"],"sources":["/Users/sheriseee/Documents/Noom/frontend/src/components/hostInGame.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { BACKEND_URL } from \"../constants.js\";\nimport { io } from \"socket.io-client\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\nimport \"../tailwind.css\";\n\nconst laneOffsets = {\n  0: 59,\n  1: 45,\n  2: 33,\n};\n\n/**\n * Car creates a car dot that goes around the track at a certain position and on a certain lane.\n *\n * Input\n * @param {integer} lane the lane on which the car is \"driving\" and it starts from 0 and ends at 2.\n * @param {integer} position the position of the car on the track, this can be a value between 0 and 360.\n * @param {string} colour allows to set a colour to the car to be able to differentiate between different players.\n * @param {integer} locOffset allows to set the offset of the location of the car on the track.\n * @param {integer} questionsCount the number of questions that are going to be asked in the game.\n *\n * Output\n * Car\n */\nfunction Car({\n  lane = 2,\n  position = 0,\n  colour = \"bg-blue-900\",\n  locOffset = 0,\n  questionsCount = 10,\n}) {\n  const offset = laneOffsets[lane] - 2 + ((locOffset * 2) % 5);\n  const radians = (position * 2 * Math.PI) / questionsCount; // Changed to 2 * Math.PI to ensure full circle\n  const carX = 50 + offset * Math.cos(radians);\n  const carY = 50 + offset * Math.sin(radians);\n  const angle = (position * 360) / questionsCount + 90;\n\n  const carStyle = {\n    position: \"absolute\",\n    width: \"40px\",\n    height: \"20px\",\n    borderRadius: \"10%\",\n    transform: `translate(-50%, -50%) rotate(${angle}deg)`,\n    left: `${carX}%`,\n    top: `${carY}%`,\n  };\n\n  return <div className={colour} style={carStyle}></div>;\n}\n{\n  /* Car prop validation */\n}\nCar.propTypes = {\n  lane: PropTypes.number,\n  position: PropTypes.number,\n  colour: PropTypes.string,\n  locOffset: PropTypes.number,\n  questionsCount: PropTypes.number,\n};\nCar.defaultProps = {\n  lane: 2,\n  position: 0,\n  colour: \"bg-blue-900\",\n  locOffset: 0,\n  questionCount: 10,\n};\n\n/**\n * Creates a player with their name and car colour into the leader board.\n *\n * Input\n * @param {string} name, the name of the player, this is a required field.\n * @param {string} colour, the colour of the car that the player has, this field is also required. This should be a tailwind colour ie bg-green-500\n *\n * Output\n * A div element with the colour on the left in a circle and the player name on the right.\n */\nfunction Players({ name, colour }) {\n  const innerDiv = \"w-5 h-5 \" + colour + \" rounded-full mr-2\";\n  return (\n    <div className=\"flex items-center\">\n      <div className={innerDiv}></div>\n      <a>{name}</a>\n    </div>\n  );\n}\n{\n  /* Player prop validation */\n}\nPlayers.propTypes = {\n  name: PropTypes.string.isRequired,\n  colour: PropTypes.string.isRequired,\n};\n\nfunction HostInGame() {\n  const location = useLocation();\n  const [socket, setSocket] = useState(null);\n  const [playerDetails, setPlayerDetails] = useState([]);\n  const [code, setCode] = useState(null);\n  const [playerLanes, setPlayerLanes] = useState({});\n  const [questionCount, setQuestionCount] = useState(10);\n  const [timer, setTimer] = useState(34);\n  const [currentQuestion, setCurrentQuestion] = useState(1);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const user = queryParams.get(\"username\");\n    setCode(queryParams.get(\"roomID\"));\n\n    // Only create the socket connection if it hasn't been created already\n    if (!socket) {\n      const sock = io(BACKEND_URL, {\n        query: {\n          name: user,\n          roomID: queryParams.get(\"roomID\"),\n          isHost: queryParams.get(\"host\"),\n        },\n      });\n      setSocket(sock);\n    }\n\n    // Cleanup the socket connection when the component unmounts\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [location, socket]);\n\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"message\", (message) => {\n        console.log(JSON.stringify(message));\n        switch (message.messageType) {\n          case \"leaderboard\":\n            setQuestionCount(message.data.maxQuestions);\n            setPlayerLanes((prevPlayerLanes) => {\n              const updatedLanes = { ...prevPlayerLanes };\n              const newPlayerDetails = message.data.leaderboard.map(\n                (player, index) => {\n                  if (updatedLanes[player.username] === undefined) {\n                    // Set lane to 1 if no lane is currently set. This would only happen at the start of the game.\n                    updatedLanes[player.username] = 1;\n                  }\n                  return {\n                    id: index,\n                    playerName: player.username,\n                    colour: player.colour,\n                    lane: updatedLanes[player.username],\n                    position: message.data.groupCentre + player.positionDelta,\n                  };\n                },\n              );\n              setPlayerDetails(newPlayerDetails);\n              return updatedLanes;\n            });\n            break;\n\n          case \"changeLane\":\n            console.log(\n              \"Changing\",\n              message.data.username,\n              \"'s lane to \",\n              message.data.lane,\n            );\n\n            setPlayerLanes((prevPlayerLanes) => ({\n              ...prevPlayerLanes,\n              [message.data.username]: message.data.lane,\n            }));\n\n            setPlayerDetails((prevPlayerDetails) =>\n              prevPlayerDetails.map((player) =>\n                player.playerName === message.data.username\n                  ? { ...player, lane: message.data.lane }\n                  : player,\n              ),\n            );\n            break;\n          case \"endGame\":\n            console.log(\"Game ended\");\n            window.location.href = `/endgame?roomID=${code}&host=true`;\n            break;\n          default:\n            console.log(message.data);\n            break;\n        }\n      });\n\n      return () => {\n        socket.off(\"message\");\n      };\n    }\n  }, [socket]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer === 0) {\n          setCurrentQuestion((prevQuestion) => prevQuestion + 0.5);\n          return 29;\n        } else {\n          return prevTimer - 1;\n        }\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleEndGame = () => {\n    socket.emit(\"message\", {\n      messageType: \"endGame\",\n    });\n  };\n\n  const handleQuestionEnd = () => {\n    socket.emit(\"message\", {\n      messageType: \"endQuestion\",\n    });\n  };\n  return (\n    <div className=\"hostGame\">\n      <div className=\"bg-green-700 flex min-h-screen\">\n        <div className=\"flex-1 flex items-center justify-center relative\">\n          {/* Creates 4 ovals which create three tracks */}\n          <div className=\"w-[90%] h-[90%] rounded-full border-8 border-gray-800 flex items-center justify-center relative bg-gray-500\">\n            <div className=\"w-[80%] h-[80%] rounded-full border-8 border-gray-800 flex items-center justify-center relative bg-gray-500\">\n              <div className=\"w-[75%] h-[75%] rounded-full border-8 border-gray-800 absolute\"></div>\n              <div className=\"w-[50%] h-[50%] rounded-full border-8 border-gray-800 absolute bg-green-700\"></div>\n              {/* Car objects mapped according to the details that are sent from the backend */}\n              {playerDetails.map((player) => (\n                <Car\n                  key={player.id}\n                  lane={player.lane}\n                  position={player.position}\n                  colour={player.colour}\n                  locOffset={player.id}\n                  questionsCount={questionCount}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n        {/* Circular Timer */}\n        <div className=\"fixed top-10 left-10\">\n          <svg width=\"100\" height=\"100\">\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n              stroke=\"black\"\n              strokeWidth=\"10\"\n              fill=\"none\"\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r=\"45\"\n              stroke=\"blue\"\n              strokeWidth=\"5\"\n              fill=\"none\"\n              strokeDasharray={Math.PI * 2 * 45}\n              strokeDashoffset={(Math.PI * 2 * 45 * (29 - timer)) / 29}\n              transform=\"rotate(-90 50 50)\"\n              style={{ transition: \"stroke-dashoffset 0.5s linear\" }}\n            />\n            <text x=\"50%\" y=\"50%\" textAnchor=\"middle\" dy=\".3em\" fontSize=\"40\">\n              {timer}\n            </text>\n          </svg>\n          <h3 className=\"text-center font-bold\">\n            Round {currentQuestion} / {questionCount}\n          </h3>\n        </div>\n        {/* On the right there is a leaderboard which will in the future be updated as players overtake one another */}\n        <div className=\"w-1/7 bg-gray-900 text-white p-4 flex flex-col items-center\">\n          <h2 className=\"text-xl font-bold\">Leader-board</h2>\n          {/* Leaderboard is populated according to the data that is sent by the backend */}\n          {playerDetails.map((player) => (\n            <Players\n              key={player.id}\n              name={player.playerName}\n              colour={player.colour}\n            />\n          ))}\n          <button\n            className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={handleEndGame}\n          >\n            End Game\n          </button>\n          <button\n            className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\n            onClick={handleQuestionEnd}\n          >\n            End Question\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HostInGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}